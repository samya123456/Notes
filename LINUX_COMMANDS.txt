1) ls ---> list all the files
2) cp 1.txt /home/usr ---> copy file to the directory
3) pwd  ---> present working directory
4) chmod --> user-group-other
5) mv 1.txt /home/usr ---> move file to the directory
6) sudo apt install apache ---> change the user to root mode if it has root permissions and execute the commands
7) sudo su ---> change the user to root mode if it has root permissions.
8) vim 1.txt ----> edit the file 
9) top --> list all highest resource consuming process
10) adduser ---> add user
11) which ls ---> which ls file is running /usr/bin/ls or /bin/ls
12) touch 1.txt ---> create file
13) sudo apt update ---> update all the softwares installed .
14) sudo apt upgrade ---> update and install all the softwares installed .
15) ls -l ---> list all the files with permissions
16) ls -a ------> list all the files including the hidden files
17) ps -ef ---> list all the process 
18) rm 1.txt ---> remove the 1.txt file
18) rm -rf <folder_name> ---> remove folder
19) whoami ----> current logged in user
20) $ ---> normal user . # --> root
21) id ---> user details
22) hostname --> host name 
23) uname  -r / -a ---> Linux information
24) ip /if--> network details
25) netstat ---> status of your network
26) ss ---> session details
27) who ---> who else is logged into the system
27) last ----> last logged in users with status
28) env ---> environment variables
29) man <command>  / <command> --help ---> details of the command what it'll do
30) apropos <text to search> ---> list all the suggestion commands
31) usermod -->user modification
32) su <username> ---> switch user
32) su - ---> switch user root
33) usermod -G root <username> --> to include user as root
34) userdel ----> delete user
35) apt --fix-broken install <software name> --> install inter dependent packages
36) apt list --installed | grep ^nmap ---> list all the packages installed.
37) apt remove <software name> ---> remove installed software but keeps the user data.
38) purge <software name> --> remove installed software WITHOUT keeping the user data.
39) free -m : available memory in MB.
40) vmstat : memory statistics.
41) sar: cpu useage.
42) sudo systemctl stop/start/staus/reload/restart/reload-or-restart sshd  ---> stop/status/view status of a deamon process
43) sudo systemctl enable/disable  sshd ---> enable /disable processes after restart
44) sudo systemctl list-units --all ---> list all the  deamons. **note it'll only list that are parsed into the memory i.e not enabled during the system start up(Like nginx it'll NOT include)
45) sudo systemctl list-unit-files --all -->  list all the  deamons.(Like nginx it'll  include)
46) journald --> deamon that logs all the events run by systemd.
47) journalctl -xe ---> read logs of all the events run by systemd.
48) ln file1 file3 --> creating the hard link of file1 and name it file3. 
49) ln -s file1 file2 ----> creating the soft link(shortcut) of file1 and name it file2. 
50) ll -i --> find the inode(index to the karnel) of a file.
   ** hard link can of be associated with same system and link can be associated with inside and outside of system. inode number is same as the file and it's hadr         link but it's different for it's softlink.
 51) ls > file1 ---> create the file1  and override the output in it .
 52)  ls >> file1 ---> create the file1  and append the output in it .
 53) grep -v what file1 --> delete all the lines containing word 'what' ,we can use wildcards like 'wha*' to do that
 54) ls file.txt not-here 1>out.txt 2> out.err  ----> 1 is standard output store in out.txt and 2 is standard output store in out.err
55)ip addr -->see the ip address
56)hostname ---> see the hostname
57)  ls | sort | uniq ----> sort and unique

talking to users:
----------------
wall ---> broadcast a message to everyone logged in the linux
 

BIOS(Basic input/output devices harddrive ect) ------>Boot loader(GRUB grand unified boot loader) ---> /boot contains the files to boot linux
syslogs ---> to check system logs


 https://ibm-learning.udemy.com/course/complete-linux-training-course-to-get-your-dream-it-job/

* All the configuration files will be there in etc folder.
1) basic commands
2) repository
3) networking
4) volume
5) security




FILESYSTEM:https://ibm-learning.udemy.com/course/linux-administration-bootcamp/learn/lecture/5720634#overview
--------------------------------------------------------------------------------------------------------------
fdisk,mkfs,mount,df -h,/etc/fstab 


fdisk ----> create and modify partitions
fdisk -l ----> list of available devices
fdisk <storage_path> then -n ----> new partition
mkfs -t <type> DEVICE --> create new file system (type : ext3 ,ext4 ,xfs) : mkfs -t ext3 /dev/std2
mount /dev/std2 /opt --> mount /dev/std2 into /opt folder
umount <mount_path_or_device_path> /opt or /dev/std2 -------> unmount
mnkswap ----> create the swap space
swapon -----> enable swap space
df -h ----> disk free space
lsblk -f ---> labels and uuid of the devices attached



(https://ibm-learning.udemy.com/course/linux-administration-bootcamp/learn/lecture/5720634#overview)
* if partition is mounted in /home all the subdirectories partition will be available in the sub-directory of /home
* if you mount volume in /home and unmount and mount in new directory , all the data will be available in the new mount point.
* file are created in /home when /home is not mounted , whose files will not be available after /home is mounted.
* To use any disk attached to linux box  ---> create partition (fdisk -n) ---> create filesystem (mkfs -t ext3 /dev/sdb3) ----> mount volume (mount /dev/sdb3 /opt) 
* /etc/fstab  --> we have to make entry to /etc/fstab to persist the mount after reboot.









LVM(LOGICAL VOLUME MANAGER) :https://ibm-learning.udemy.com/course/linux-administration-bootcamp/learn/lecture/9549294#overview
-------------------------------------------------------------------------------------------------------------------------------
lsblk -p


1) LOGICAL VOLUME MANAGER : With LVM you can aggregate multiple storage devices into the single logical volume.
2) LVM allow you to extract data from two or more disk parallely,which increases the throughput.
3) DATA Mirroring -----> with LVM we can create multiple replicas of data by data mirroring to avoide single point of failure
4) LVM gives us point in time snapsort of you data. 
5) lsblk -p ---> available devices 
6) pvcreate /dev/sdb ---> create physical volume
7) pvs ---> list of physical volumes created 
8) vgcreate vg_app <atleast one pv> --> create volume group.
8) vgextends <group_name> <device_to_add> --> add device to the volume group
9) vgs ---> list of volume groups
10) lvcreate -L 20G -n <logical_volume_name> <volume_group_name> -----> create logical volume
11) lvs or lvdispaly ---->  list of logical volume 
12) mkfs -t ext4 <path_to_logical_vloume>  ---> create filesystem from the logical volume
13) ****logical extends ---> logical volume(https://ibm-learning.udemy.com/course/linux-administration-bootcamp/learn/lecture/9549464#overview)
14) lvcreate -L --> capital L for human readable space(25G like that)
	     -l --> available logical extends (lvdisplay -m)
15) lvdisplay -----> available logical extends (lvdisplay -m)

Layer of abstractions --> Physical volume(pv) ----> volume group(vg) -----> logical volume(lv) ----> filesystem(mkfs) -----> mount






create Physical volume from the available disks (pvcreate /dev/sdb) -----> attach it with volume group ---> now we can create multiple logical volume from volume group and
the default path of the logical volume /dev/<group_name>/<logical_volume_name> ---> create the file system of the logical volume ---> mount the logical volume into a directory


NETWORKING: (https://ibm-learning.udemy.com/course/linux-administration-bootcamp/learn/lecture/5720646#overview)
------------------------------------------------------------------------------------------------------------------
ping ,netstar,telnet, tcpdump,traceroute,nmtui


	Ip range:
	---------
	class A : 1 -->127.0            
	class B : 128.0 -->191.255
	class C : 192.0.0 ---> 233.255.255

	class    :   subnet mask
	class A  --> 255.0.0.0
	class B  --> 255.255.0.0
	class C  --> 255.255.255.0

/etc/hosts ----> contains all the ip and FQDN names ex : 1.2.3.5 company.com
	
/etc/nsswitch.conf -----------> name server switch ,it controll search order for resolutions in DNS .

ip addr command o/p contains 2 parts ---> 1) lo (loopback device : special ip address linux uses to communicate with itself)(127.0.0.1)
		                      2) eth0: actual harddrive device(192.168.1.122)



/etc/services -----> all ports are defined : 80 --> http, 443 -->https , 22 --> ssh etc ...

assign a static ip address ----> /etc/sysconfig/network-scripts/ifcfg-ens3

manually assigning ip address ------>ifconfig eth0 <ip_addr>

to bring the network interface up -------> ifconfig eth0 up

GUI tool to edit network interface -----> nmtui


testing connectivity with ping ---> ping -c 3 google.com


1) ping---> command doesn't tell anything about the path or the route the packets take, it can be done using traceroute.
2) traceroute(requires root privileges) ----> sends 3 packets to each hop that the route path taken.
3) another option is tracepath ---->tracepath: donot require root previlages
4) netstat: 
	 -i : display network interface
	 -n : display numaric address and port
	 -r : display route table
	 -ntlp******** : displays all the listening to TCP Port

5) tcpdump
6) telnet:
	 telnet can be used to ping any host with specified port.
	 Ex - if you want to do telnet on 80 http port for google.com 
	 telnet google.com 80 GET /
	 res : http/1.0.0 200 OK
 
 
SECURITY: (https://ibm-learning.udemy.com/course/learn-linux-administration-and-linux-command-line-skills/learn/lecture/17069944#overview)
--------------------------------------------------------------------------------------------------------------------------------------------

	Firewall :
	---------

	/etc/sysconfig/iptables(RHEL) ---> firewall can be configured inside iptables. iptables communicates with the net filter module in Kernal to implement
	firewall
	*firewalld --> deamon that enables firewall anytime

	*start firewalld:
	 systemctl start firewalld
	 
	*we can specify inbound and outbound rules in iptables 

	*in runtime if you want to allow/deny then use firewalld.


	Server:
	--------
	
	Physical Security:
	-----------------
	1) keep you softwares up-to-date : yum update
	2) minimal privileges to the users
	3) use encriptions
	4) Avoide non secure Protocols
	5) minimum number of services per server
	6) enforcing good password policy .for password expiry use chage command ----------> change  /etc/login.defs file.
	7) disable root login  ----> /etc/ssh/sshd_conf
    8) defend ssh attack -------------> /etc/hosts.deny  && change default ssh port 22.
	9) enable security scan (nmap)
	10) additional security tool ------ >wirehark
	11) regular back up -----> amanda
 


PROCESS : https://ibm-learning.udemy.com/course/learn-linux-administration-and-linux-command-line-skills/learn/lecture/17069988#overview
---------------------------------------------------------------------------------------------------------
ps -eaf ,top,pstree,kill, jobs
command& ----> make process background

Niceness:
--------
Each process has an assigned priority, which is
established at initiation. It is based on a numeric
value called niceness (or a nice value).


There are 40 niceness values, with -20 being the 
highest and +19 being the lowest value.


Most processes started by the system use the default
niceness of 0. 


A process running at higher priority gets more CPU
attention.


A child process inherits the niceness of its parent or
calling process.

Normally, we run programs at the default niceness but
we can change it based on system load and urgency.

change niceness of any process : nice -2 <process_cmd> ex : nice -2 top(niceness +2 for top)
		  nice --10 ls : niceness -10 for top

renicing of the running process: renice 2 <process_id> : change the priority of current process


PROC:
-----
df -ah 
proc filesystem is a filesystem mounted at /proc in linux where kernal post information about currently running stopped or active processes.

ls -alh /proc
stored PID as a directory

/proc/1 --> cwd --> current working directory info
			maps --> memory mapping info
			cmd --> what command the process is currently executing
			environ --> environment variables





RSYNC:
------
rsync org/* bkp  ---> only copy directory not the sub-directory
rsync -r org/ bkp ---> copy directory and  the sub-directories
rsync -a org/ bkp ---> a archive . it's the best as it copy with all permissions,group,user,timestamp
rsync -av --dry-run org/ bkp/ ---> display all the files that will be synced without actually synching them.
rsync -av --delete org/ bkp/ ---> it'll copy all the files in bkp from org and it'll also delete any extra files available in bkp folder
rsync over the network :
rsync -zaP ~/Project/my_site samya@10.12.0.1:~/project ---> z --> compress , a --> archive , P --> show progress 

CRON:
-----
crontab -e ---> open the editor for crontab
min(0-59)| hour(0-23)| day of month(1-31)| month (1-12)| day of week(0-6) 
* * * * * --> every min all hour all days all month all day of week
* * 1,15 * * --> every min all hour 1st and 15th day all month all day of week
*/10 * * * * ---> every 10 mins all hour all days all month all day of week
* 0-5 * * * --> every min 0 to 5 hour all days all month all day of week
			
SYSTEM PERFORMANCE:
------------------
make a process background process --> add & . Example firefox&
change the nice value --> renice -n -12 <PID>  --> -ve nice value means higher priority
vmstat --> large r value is cause of concern
iostat --> disk utilizations
sar -n DEV 1 ---> network stat
strace -tp | head 1 --> application monitoring

REPO:
-----


CREATE MANUAL REPO:
------------------
https://ibm-learning.udemy.com/course/learn-linux-administration-and-linux-command-line-skills/learn/lecture/15527798#overview

cd /etc/yum.repos.d -->list of all repos file
yum repolist-->list all the repo 

Create local REPO:
------------------
1) yum install -y yum-utils
2) mkdir /repos
3) yumdownloader -v vsftpd
4) yum install -y createrepo
5) createrepo /repos
6) create file local.repo 
	local.repo
	[localrepo]
	name=repo
	baseurl =file://repo
	gpgcheck=0
	enable=1

7) move the local.repo to /etc/yum.repos.d
8) check with yum repolist

for loop read files:

-------for loop to read all files in folder-------
for f in *.txt
     do
	echo "file name is $f";
        while read -r row; 
	   do 
	     echo "Hi $row" ; 
	   done < $f;
     done;
 ----------------------------------
 
 ---------------normal for loop---------
 
 for (( i=1 ; ((i-100)) ; i=(($i+1)) ))
do
  echo $i
done;

------------------------------------------

i=1;
while [[ i -le 100 ]] ;
do
  echo $i;
  i=$((i+1));
done;

---------if else example----------- 
 if [ $a == $b ]
then
   echo "a is equal to b"
else
   echo "a is not equal to b"
fi
-----------------------------

-----print word count of all the words a file------

cat a.txt | tr '[:space:]' '[\n*]' | grep -v '^\s*$' |sort|uniq -c |sort


tr --> just replaces spaces with newlines
grep -v "^\s*$"  ---> trims out empty lines
sort ----> to prepare as input for uniq
uniq -c  ---->to count occurrences
sort -bnr ---- >sorts in numeric reverse order while ignoring whitespace

-----------------------------------------------------------------------


uptime -----------> Load average
dmesg | tail -------> kernal error
vmstat 1 ----------> overall stats by time
mpstat -P ALL 1 ------> cpu balance
pidstat 1 ---------> process useage
iostat -xz 1 -----------> disk I/O
free -m ----------> memory usage
sar -n DEV 1 ------------> network I/O
sar -n TCP,ETCP 1
top ---------> process info
staces ------> system calls made from the appications.
perf ------------> monitor sort live process which can't be traced by top commands

Linux inbuilt commands:
----------------------
cd,echo,read,break,continue,eval,exec,exit,kill,jobs,history,help




 interview questions:
 1) zombie process ---> Apple
 2) iNode in linux -->Apple
 3) we have two 2 gb hard drive and we have to insert a 3gb file, how to do that. ----> Apple RAID concept(https://en.wikipedia.org/wiki/Standard_RAID_levels)
 4) inbuild functions in unix --> apple
 5) inbuild function to list files ----> echo * --->apple
 6) inbuild function for read file ---> read * ----> apple
 7) crontab file name ----> apple (/var/spool/cron/crontabs)
 8) how to check a file is external file system or inbuild --> do df -h and then see the filesystem column , if you see those are under /dev the those are virtual
 9) difference between oistat vs vmstat
 10) swap memory
 11) strace
 12) how to print lines that contains word "error"  ----> cat a.txt | grep -F 'error'
 12) how to print lines that  doesn't contains the word "error" -->  cat a.txt | grep -v 'error'
 13) what is TCP/UDP
 14) real time example of fork being used.
 15) stateless webserver vs stateful web server
 16) advantace of REST over HTTP and SOAP
 17) if ssh is not working in which port we should be connecting to debug the linux box in baremetel services.
 18) if any application server is slow how to monitor that.
 19) what is TCP/UDP
 20) How to check if any command is built in or not --> type <command> . ex: type cd ---------> "cd is a shell builtin"
 
 *******SYSTEM CALLS: fork() , exit() , exec() ,getpid(), alarm(), sleep() , open(), read(), write(), close(), ioctl()
 
 *******INBUILT COMMANDS : cd, echo, read, break, continue, eval, exec, exit, kill,jobs, history, help
 
 *******PROCESS COMMANDS: ps -eaf , top, pstree, kill, jobs, nice 
 
 *******FILESYSTEM COMMANDS: fdisk, mkfs, mount ,df -h, /etc/fstab , pvcreate ,vgextends , lvcreate ,lvdispaly
 
 *******NETWORK COMMANDS: ping ,netstar, telnet, tcpdump , traceroute, nmtui 
			 

 ********DEBUG CALLS***********************

			uptime -----------> Load average
			dmesg | tail -------> kernal error
			vmstat 1 ----------> overall stats by time
			mpstat -P ALL 1 ------> cpu balance
			pidstat 1 ---------> process useage
			iostat -xz 1 -----------> disk I/O
			free -m ----------> memory usage
			sar -n DEV 1 ------------> network I/O
			sar -n TCP,ETCP 1
			top ---------> process info
			staces ------> system calls made from the appications.
			perf ------------> monitor sort live process which can't be traced by top commands
 
