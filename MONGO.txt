

https://app.pluralsight.com/course-player?clipId=bf331c74-4751-4c86-a2e8-e68170732743


db.slaveOk() -----> To Enable the replications in secondary.
rs.staus() -----> relica set status

db.collection('quotes').insertOne({id:1,value:"Hello world"})

eval ---> allow users to run administritive commands without from mongo.

DB.prototype.database = function(){
	print("don't do it ")

}   ----------> creating prototype to avoide accidentally delete database in production.

.mongorc.js -----> where we can write all the scripts bo be retained.

DB COMMANDS:
-----------
1) show collections: showing all the collections;
2) db.createCollection("foo")
3) db.foo.insertOne({_id:1 ,value:"Hello World"}): foo -->collection name
4) db.foo.find({_id:1})
5) system.index collection : mongo creates the indices on each _id field of each collections and store it in system.index file.
6) if we don't put _id then mongo will assign id : 'objectId(adadasdadsda)' field by it self.
7) objectId.getTimeStamp();
8) db.save() : overrides the value if same _id is already present. 
9) db.insertOne ---> gives error if same _id is already present. 
10) db.foo.updateOne({_id :1} ,{$inc:{x:1}}) ---> $inc increment x by 1.
11) db.foo.updateOne({_id :1} ,{$set:{y:1}}) -----> $set add field y without touching the other columns 
12) db.foo.updateOne({_id :1} ,{$unset:{y:''}}) -----> $unset remove field y without touching the other columns 
13) db.foo.updateOne({_id :1} ,{$rename:{'naem':'name'}})
14) db.a.update({_id: 1}, {$push:{things:"one"}) ----> $push add items to the array;
15) db.a.update({_id: 1}, {$pull:{things:"one"}) ----> $pull removes all  items having value 'one' from  the array;
14) db.a.update({_id: 1}, {$pop:{things: 1}) ----> $pop remove the last as {things : 1}  from  the array , if {things: -1} $pop remove the first element.
16) db.a.updateMany({}, {$pop:{things: 1}) -----> updateMany will update  all the records as {}; update --> by default it updates only one.
17) db.foo.find({_id:{$gt:5}},{id:1}) ----> $gt greater than, $lt less than , $gte greater than equal
18) db.foo.find({_id:{$gt:5,$lt:10}},{id:1}) -------> greater than 5 and less than 10.
19) db.foo.find({_id:{$not :{ $gt:5}}},{id:1}) ------> $not
20) db.foo.find({_id:{$in :[1,3]}},{id:1}) ----> $in id field with 1,3 
21) db.foo.find({_id:{$nin :[1,3]}},{id:1}) -----> $nin not in.

	{  
	  "_id" :3 ,
	  "name" : duck,
	  tags: [
	          "land",
			  "cute"
			 ],
	  info: {
		"type" : "bird",
		"canFly" : true
	  }
		
	}
	
22)	find all birds whose info.canFly is true:
	---------------------------------------
	db.foo.find({"info.canFly" : true})  ----> info.canFly Dot notations
23) db.foo.find({"info.canFly" : null})  ---->  will return all the documents that has info.canFly is null plus which doesn't have info.canFly field at all. if we want to restrist to return all the documents that has info.canFly and the value is null , need to use {$exists:true} 
db.foo.find({"info.canFly" : {$exists:true}}) 

24) return specific fields in find : projections 
    ---------------------------------------------
    to include field : {name:1} 
	to exclude field : {name:0}
	
	db.foo.find({"info.canFly" : true},{name:1, type:1}) ---> will show only name and typefield
	db.foo.find({"info.canFly" : true},{name:0}) ---> will show all fileds expect name field

25 Cursor :
   ---------
  var c = db.foo.find({},{name:1}) ;
  
  c.forEach(function(d){print(d.name)});
  c.size();
  c.hasNext();
  
26) sorting (Cursor method):
    -------
	db.foo.find({}, {name:1}).sort({name:1}) ----> 1 ascending,  -1 descending
	db.foo.find({}, {name:1,"info.type" :1}).sort({"info.type" :1 ,name:1}) ---> multiple sorting , first info.type then name
	
27) Limit (Cursor method):
    -----------------------
   db.foo.find({},{name:1}).limit(3)
   
   
28) INDEXING:
	---------
	Regular(B-Tree)
	Geo
	Text
	Hashed
	TTL ---> time to live : if we use this index and set expiration date time the field then Mongo will automatically delete those rows.
	
    create index:
	------------
    db.foo.ensureIndex(keys,options)	
	
	find index:
	-----------
	 db.system.indexes.find({ns:<db_name>},{_id:1})
	 
	 to see if cursor is using index or not:
     ---------------------------------------
	 db.foo.find({},{name:1}).explain()
	 
	 nsscanned : tells us how many partitions indexes scanned to run the query.
	 
	 
	 drop index:
	 -----------
	 db.foo.dropIndex("index_name")
	 
	 create unique index :
	 ---------------------
	 
	 db.foo.ensureIndex({name:1},{unique:true})
	 
	 sparse index:
	 -------------
	  it will only create index on the document where the field exists,
	  db.foo.ensureIndex({"info.colour":red},{sparse:true}) --->it will only create index on the document where info.colour field exists
	  
	build index in the backgroud without intarrupting the read and write operations
	----------------------------------------------------------------------
	db.foo.ensureIndex({name:1},{background:true})
	
	index name:
	-----------
	db.foo.ensureIndex({name:1},{name:"myindex"})
