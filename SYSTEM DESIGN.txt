SYSTEM DESIGN TOPICS

Tinder
Stock price exchange
Logging system
WhatsApp
tiktok
amazon
twitter
instagram







===============================================================================================
*Entry point to any app or website:

API GATEWAY ->Session —-> authentication / authorisation micro service
**API GATEWAY have timeout time for 29 sec.



*Direct messaging:
Xmpp protocol/ TCP
Extensible messaging presence protocol
Push to update/ get messages

whatsApp:
--------
Language == Alang
10 million connections per server
OS == FreeBSD
DB == Amnesia (key value pair DB)
Webserver == YAWS


OLA/UBER:
---------
Google S2 library created 1km/1km small blocks and provides a unique id to that in google map.
=================================================================================================
*Low latency:
Video file via cdn( content delivery network) aws cloudfront in multiple regions .
S3 + cdn(cloud front)

*Vertical scaling:
Adding more memory to Node/Pods

*Horizontal scaling:
Load balancers: Nodes/Pods

*High availability:
Cloud front

*Fault tolerance:
Read replica formula 2*n+1

*Single point of failure
Masters/ slave architecture

*Store the data based on location
Shading /Horizontal partitions

*Queue:
SQS
KAFKA

*trend Analysis:
Spark/Strom

*Log visualisation from database
Grafana
*Centralized log cluster
Log stash —-> search (elastic search)—->visualisation (kibana)

*Auto generation of co relation id for logging
Spring boot sleuth


====================================================================

*Monitoring AWS EKS
EFK Stack( Elastic search ——> fluentD——> kibana

fluentD-retrieve the log matrix and pushes to elastic search.
Kibana-Monitoring
======================================================================

*SECURITY WEB APPLICATION
(Acloudguru security part in Udemy)
1. NETWORK ACL
2. WAF - web application firewall
3. Cloud front to block entire region

*ENCRYPTION
1. KMS
2. CloudHSM
3. Parameter store

Automated disaster recovery
Cloudendure
Zookeepers
===================================================================
Hotstart Auto scaling happens not based on CPU and memory but with 
Request per second and request concurrency.

===================================================================


*Video streaming from s3 to mobile- https
===================================================================
Nosql database list:
1. dynamoDB
2. Cassandra
3. MongoDB

Cache:
1. radis cache

RDBMS:
1. Postgres
2. Aurora
3. MySQL
4. Oracle

=====================================================================

****MUST SAY
1. micro service
2. Queue
3. No sql
4. Cache
5. RDBMS
6. Docker
7. Kubernates
8. Load balancer
9. CDN/ cloud front ==>Famous CDN Provider AKAMAI
10. Read replica
11. Log in Session
12. Push message/web sockets

====================================================================

Non functional requirement:
1. scalability ==> Vertical scaling: Adding more memory to Node/Pods  + Horizontal scaling: Load balancers: Nodes/Pods
2. High Availability ===> Cloud front /CDN(AKAMAI)
3. Consistency ==> Eventual Consistency , Strong Consistency
4. Security ====> WAF - web application firewall + Cloud front to block entire region +  NETWORK ACL
5. Low letency ==> S3 + cdn(cloud front)
6. disaster recovery: 
7. Single point of failure: Masters/ slave architecture
8. Fault tolerance : Read replicas in S3 +CDN
9. Reliability : Backup Your data
